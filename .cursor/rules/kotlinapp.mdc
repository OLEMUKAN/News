---
description: 
globs: 
alwaysApply: true
---



# 📱 University News App (UNews)

## 📌 Project Overview

**UNews** is a modern Android application designed using **Jetpack Compose** to deliver verified news and announcements to university students and staff. Developed as part of a final semester project, this app aims to streamline the delivery of academic, administrative, and social updates in real-time using **Firebase** as the backend.

The application offers both **student-facing functionality** (reading, saving, reacting to news) and **admin functionality** (adding news content), all within a sleek, responsive, and thematically rich user interface guided by **Material Design** principles and enabled by **Navigation Compose** for a seamless multi-screen experience. The features detailed in the "Final MVP Feature List" section define the specific scope of this project iteration.

---

## 🇺🇬 Context: Real-World Problem in Uganda & Project Scope

### Use Case
Many Ugandan universities lack centralized and reliable platforms for broadcasting timely news to students. Traditional notice boards or scattered social media messages often result in missed opportunities and misinformation. **UNews** addresses this gap by providing a verified, structured, and interactive news platform tailored for university communities.

### Scope and Limitations
This project focuses on delivering a Minimum Viable Product (MVP) that addresses the core need for a centralized news platform. The **Final MVP Feature List** (detailed below) outlines the specific functionalities implemented. While the long-term vision for UNews is broad, this iteration concentrates on establishing the foundational features: user authentication, news consumption (feed, details, save, search), basic interaction (comments, reactions), dark mode, offline caching, and admin content submission. Features like advanced analytics, rich push notifications, or direct image uploads from device are considered future enhancements beyond the current scope.

---

## 🎯 Final MVP Feature List

### 1. 🔐 Firebase Authentication
- **Login via Email/Password** using Firebase Authentication.
- User role separation (Admin vs. Student, inferred via Firestore document fields).
- Utilizes **Material TextFields** for input and **Material Buttons** for actions.

### 2. 📰 News Feed (Home Screen)
- Dynamic list of news articles using `LazyColumn`, displaying well over five items.
- Fetches data in real-time from **Firebase Firestore**.
- Each news item presented in a **Material Card** with defined rounded shapes shows:
  - Title
  - Short summary
  - Thumbnail image (e.g., with custom rounded corners)
  - Timestamp
- Clickable to navigate to the full article screen, providing clear visual feedback.

### 3. 📄 Article Details Screen
- Full article display with headline, content, author, timestamp, and banner image.
- Features:
  - 💬 **Comments:** Submit and view comments from Firestore, using **Material TextFields** for input and **Material Buttons** for submission.
  - ❤️ **Reactions:** Like button or emoji reactions using clickable **Material Buttons**.

### 4. 📥 Saved Articles
- Users can bookmark/save articles to view later.
- Saved status stored per-user in Firestore.
- "Saved" screen displays all saved articles in a `LazyColumn` of **Material Cards**.

### 5. 🔍 Search and Filter
- Search articles by title or keywords using a **Material TextField** for input.
- Filter by tags or categories (e.g., Academics, Sports, Events).

### 6. 🌙 Dark Mode / Theme Toggle
- Toggle between light and dark mode using **MaterialTheme** and dynamic theming in Jetpack Compose.
- Toggle persists using `DataStore` (or ViewModel state).

### 7. ⚙️ Offline State Handling
- Cached article data available offline using Firestore’s offline capabilities.
- View previously loaded articles in read-only mode when disconnected.

### 8. 📝 Admin Article Submission
- Admin-only screen for creating new articles.
- Article form includes title, content, image URL, category, and author name, using **Material TextFields**.
- **Form validation** for user input: required fields, minimum content length.
- Article is submitted to Firestore via a **Material Button** and appears on the feed in real-time.

---

## 🎨 UI, Theming, & Navigation

UNews prioritizes a modern, accessible, and visually appealing user experience, built upon **Material Design** principles and facilitated by robust navigation.

-   **Material Design Foundation:** The application is built adhering to **Material Design (specifically Material 3)** guidelines, utilizing its components and theming capabilities provided by Jetpack Compose to create a modern, cohesive, and intuitive user experience.
-   **Custom Launcher Icon:** The app features a unique launcher icon, replacing the default Android icon for distinct branding.
-   **Material Theme Implementation:**
    -   **App Bar:** A consistent `TopAppBar` (a Material component) is implemented across relevant screens for navigation structure, branding, and actions.
    -   **Custom Color Scheme:** A thoughtfully chosen color palette with distinct primary, secondary, and background colors (minimum three custom colors) defines the app's visual identity and is applied via `MaterialTheme`.
    -   **Typography:** Non-default fonts (e.g., from Google Fonts) are used for at least one text style to improve readability and aesthetic appeal, configured within the `MaterialTheme`.
    -   **Shapes:** Defined shapes, such as rounded corners for `Card` components and images, contribute to a cohesive and modern look, managed via `MaterialTheme`'s shape system.
-   **Consistent Styling:** All UI components (Buttons, Cards, TextFields, etc.) adhere to a consistent styling guide derived from the `MaterialTheme`, ensuring visual harmony across the app.
-   **Multi-Screen Navigation with Navigation Compose:**
    -   The app features a minimum of two screens (in this case, many more including Login, News Feed, Article Details, Saved Articles, Admin Panel) and employs **Navigation Compose** for seamless and type-safe transitions between them.
    -   Navigation is structured to be intuitive, often guided by the `TopAppBar` and clickable elements.
-   **Scrollable Lists:** `LazyColumn` is used extensively for displaying dynamic content (news feeds, saved articles, comments), efficiently handling lists with many items (minimum five, with at least three featuring both text and images).
-   **Custom-Shaped Images:** Images, such as article thumbnails, utilize custom shapes (e.g., rounded corners) defined within the theme.
-   **Interactive Elements & Animations:**
    -   At least one subtle animation (e.g., screen transition fades, content appearance animations) is implemented to enhance user experience.
    -   All interactive elements (buttons, list items) provide clear visual feedback (e.g., ripple effects inherent in Material components) upon user interaction.

---

## 🧱 Architecture & State Management

### 📐 MVVM Architecture
The application follows the Model-View-ViewModel (MVVM) architecture pattern to ensure a clean separation of concerns:

```

+-----------------------+
\|      UI Layer         |
\|  (Compose Screens,    |
\|   Material Components)|
+----------+------------+
|          ^ (Observes State)
|          | (Sends Events)
v
+-----------------------+
\|   ViewModel Layer     |
\| (Handles state, logic,|
\|  Navigation Events)   |
+----------+------------+
|
v
+-----------------------+
\|   Repository Layer     |
\| (Firebase interaction) |
+----------+------------+
|
v
+-----------------------+
\|  Data Layer (Models)   |
+------------------------+

```

### 🔄 State Management
-   `ViewModel` instances are responsible for holding and managing UI-related data and state for each screen, surviving configuration changes.
-   State is exposed to Composables using `StateFlow` or `MutableState` for Compose to observe and react to changes, ensuring the UI is always up-to-date.

### 🔧 Configuration Change Handling
-   The app is designed to gracefully handle configuration changes (e.g., screen rotations, theme changes, language changes if implemented) without losing user data or UI state. This is primarily achieved by leveraging `ViewModel`s.

---

## 🛠️ Technical Standards & Best Practices

-   **Clean Architecture Principles:** MVVM, the project emphasizes a clear separation between the UI layer, business logic (ViewModels), and data layer (Repositories), promoting maintainability and testability.
-   **No Hardcoded Strings:** All user-facing text is externalized into `app/src/main/res/values/strings.xml`. This practice is crucial for maintainability and enables future localization efforts.
-   **Dimension Management:** All spacing, padding, and component sizes are defined in `app/src/main/res/values/dimens.xml` using scalable units like `dp` (density-independent pixels) for layouts and `sp` (scale-independent pixels) for text, ensuring UI consistency across different screen densities.
-   **User Input Handling:** The app effectively manages user inputs through:
    -   **Form Validation:** Robust validation is implemented for input fields in forms (e.g., login, admin article submission) to guide users and prevent errors.
    -   **Button Clicks & Gestures:** Interactions like button clicks and gestures (e.g., taps on list items) are handled promptly with appropriate visual feedback and trigger defined actions.

---

## 💡 Technologies Used

| Tech                     | Purpose                                   |
|--------------------------|-------------------------------------------|
| Jetpack Compose          | Modern UI toolkit for Android             |
| Material 3               | UI components, theming (colors, typography, shapes), App Bar |
| Navigation Compose       | Multi-screen navigation (minimum of two screens required) |
| Firebase Firestore       | Realtime NoSQL database for news, comments|
| Firebase Auth            | User authentication (Email/Password)      |
| Coil                     | Image loading and caching                 |
| ViewModel + StateFlow    | State management, lifecycle-aware         |
| Firestore Offline Cache | Offline read access for articles          |
| DataStore (or ViewModel) | Theme toggle persistence                  |
| Google Fonts (optional)  | Custom typography for Material Theme      |

---

## 📁 Suggested Project Structure

```
/com/unews/  (or your package name)
│
├── data/
│   ├── model/
│   │   ├── NewsArticle.kt
│   │   ├── Comment.kt
│   │   └── User.kt
│   └── repository/
│       ├── NewsRepository.kt
│       └── AuthRepository.kt
│
├── di/  (If using Hilt/Koin for Dependency Injection)
│   └── AppModule.kt
│
├── ui/
│   ├── navigation/    (Navigation graph, routes, destinations)
│   │   └── AppNavigation.kt
│   ├── screens/
│   │   ├── auth/
│   │   ├── news/
│   │   ├── saved/
│   │   └── admin/
│   ├── components/  (Reusable UI elements like NewsCard, CustomButton)
│   └── theme/       (Color.kt, Theme.kt, Typography.kt, Shape.kt)
│
├── viewmodel/
│   ├── AuthViewModel.kt
│   ├── NewsViewModel.kt
│   └── ... (other ViewModels)
│
├── utils/
│   ├── Constants.kt
│   ├── Validators.kt
│   └── Resource.kt  (For API/DB call states)
│
├── UNewsApp.kt       (Application class, if needed)
└── MainActivity.kt

/app/src/main/res/
├── drawable/        (Custom launcher icon here)
└── values/
    ├── strings.xml
    └── dimens.xml
```
*(Added `ui/navigation/` to the structure and highlighted where `strings.xml` and `dimens.xml` reside)*

---

## 🧪 Testing & Validation

-   ✅ **Material Design & Theming:** Verified custom launcher icon, app bar, color scheme, fonts, and shapes are consistently applied.
-   ✅ **Multi-Screen Navigation:** Navigation between all screens (Login, News Feed, Article Detail, Saved Articles, Admin Submission) via Navigation Compose tested and functioning correctly.
-   ✅ **State Preservation:** Rotation state and theme changes tested using ViewModel to ensure no data loss.
-   ✅ **Dark/Light Theme:** Theme toggle functionality works consistently across all screens.
-   ✅ **Real-time Updates:** Confirmed real-time data synchronization with Firestore for news feed and comments.
-   ✅ **Input Validation:** Thoroughly tested input validation for article submission, login, and comments.
-   ✅ **Component Rendering:** Verified `LazyColumn` displays items correctly, including those with text and images, styled with Material Cards.
-   ✅ **Offline Capability:** Tested Firestore's offline caching for viewing previously loaded articles.
-   ✅ **Cross-Device Testing:** Tested on multiple screen sizes/emulators to ensure responsive UI.
-   ✅ **Resource Externalization:** Confirmed all user-facing strings are in `strings.xml` and dimensions in `dimens.xml`.

---

## 🚀 Future Enhancements (Post-MVP)
- Push notifications for new articles
- Role-based access control (actual Firebase Auth Claims)
- Image upload from device for admin
- Analytics dashboard for Admin
- Comment moderation
- More sophisticated animations and transitions
- Support for language changes (localization beyond basic `strings.xml` structure)

