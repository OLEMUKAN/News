---
description: 
globs: 
alwaysApply: false
---
UNews: Step-by-Step Development Plan

This plan outlines the phases and key tasks involved in developing the UNews application from inception to MVP completion.

Phase 1: Project Setup & Foundation (The Groundwork)

Initialize Project:

Create a new Android Studio project with Jetpack Compose enabled.

Set up version control (Git) and initialize the repository.

Define the project's package structure (e.g., com.unews.data, com.unews.ui, com.unews.viewmodel).

Firebase Integration:

Create a new Firebase project in the Firebase Console.

Add an Android app to the Firebase project, download google-services.json, and place it in the app/ directory.

Enable Firebase Authentication (Email/Password sign-in method).

Enable Cloud Firestore and set initial (lenient) security rules for development.

Add necessary Firebase dependencies to build.gradle.

Basic Theming & Resources:

Create a custom launcher icon and replace the default Android icon.

Define the initial Material 3 Theme (Color.kt, Type.kt, Shape.kt):

Select and implement the custom color scheme (primary, secondary, background, etc.).

Choose and integrate non-default fonts (e.g., from Google Fonts) for at least one text style.

Define basic shapes (e.g., rounded corners for Cards).

Set up strings.xml for all initial user-facing text (even placeholders).

Set up dimens.xml for common spacing, padding, and sizes.

Core Dependencies:

Add dependencies for Jetpack Compose, Navigation Compose, ViewModel, Coil (for image loading), and any other core libraries.

If using Dependency Injection (Hilt/Koin), set it up now.

Phase 2: Authentication & User Management (The Gateway)

Define User Model:

Create the User.kt data class (e.g., uid, email, role - initially inferred).

Authentication Repository:

Create AuthRepository.kt to abstract Firebase Auth operations (login, register, logout, get current user).

Authentication ViewModel:

Create AuthViewModel.kt to handle authentication logic, manage state (loading, error, success), and interact with AuthRepository.

Login Screen UI:

Design and implement the Login screen using Jetpack Compose:

Email and Password TextFields (Material components).

Login Button (Material component).

Display loading indicators and error messages.

Implement basic input validation.

Connect UI elements to AuthViewModel.

Navigation Setup (Initial):

Implement basic app navigation using Navigation Compose.

Define routes for LoginScreen and a placeholder HomeScreen.

Implement logic to navigate to HomeScreen after successful login.

Phase 3: News Feed & Core Content Display (The Heart of the App)

Define News Article Model:

Create NewsArticle.kt data class (e.g., id, title, summary, content, imageUrl, timestamp, author, category).

News Repository:

Create NewsRepository.kt to handle Firestore operations for news articles (fetch all, fetch by ID, etc.).

Implement real-time listeners for the news feed.

News ViewModel (Feed):

Create NewsViewModel.kt to fetch and manage the list of news articles for the home screen.

Expose news data as StateFlow or MutableState.

News Feed Screen UI (Home Screen):

Design and implement the Home Screen:

Scaffold with a TopAppBar.

LazyColumn to display news articles.

Create a reusable NewsItemCard.kt Composable using Material Card:

Display title, short summary, thumbnail image (using Coil), and timestamp.

Ensure custom shapes (rounded corners) are applied.

Make items clickable.

Implement basic loading and empty states.

Connect UI to NewsViewModel.

Firestore Offline Capabilities:

Ensure Firestore's offline persistence is enabled to cache loaded articles.

Phase 4: Article Details & Interaction (Deeper Engagement)

Article Details Screen UI:

Design and implement the Article Details Screen:

Display full headline, full content, author, timestamp, and banner image (using Coil).

Structure with a TopAppBar for navigation back.

Update NewsViewModel (or create a dedicated one) to fetch a single article by ID and manage its state.

Implement navigation from NewsItemCard on the Home Screen to this screen, passing the article ID.

Comments Functionality:

Define Comment.kt data class (e.g., articleId, userId, text, timestamp).

Extend NewsRepository to handle comment submission and fetching for a specific article.

Extend NewsViewModel (or Article Details ViewModel) to manage comments.

Implement UI for displaying comments (LazyColumn of comment items).

Implement UI for submitting new comments (TextField and Button).

Include basic input validation for comments.

Reactions Functionality:

Decide on reaction type (simple Like or multiple emojis).

Update NewsArticle.kt model to store reaction counts/data.

Extend NewsRepository to handle updating reactions in Firestore.

Extend NewsViewModel (or Article Details ViewModel) to manage reaction state.

Implement UI for displaying and interacting with reactions (e.g., a clickable Like Button or emoji picker).

Phase 5: User-Specific Features (Personalization)

Saved Articles Functionality:

Determine how saved status will be stored (e.g., a subcollection under user, or a list of article IDs in the user document).

Extend NewsRepository (or create UserRepository) to save/unsave articles and fetch saved articles for a user.

Create SavedArticlesViewModel.kt to manage the list of saved articles.

Implement UI for the "Saved" screen (LazyColumn of saved NewsItemCards).

Add a "Save" button/icon to NewsItemCard and ArticleDetailsScreen to toggle saved status.

Search & Filter Functionality:

Implement UI elements for search (TextField) and filters (e.g., DropdownMenu or Chips) on the Home Screen or a dedicated search screen.

Extend NewsRepository to support querying articles by title/keywords and filtering by category/tags.

Update NewsViewModel to handle search/filter queries and update the displayed news list accordingly.

Phase 6: Admin Functionality (Content Management)

Admin Role Identification:

Implement logic to identify admin users (e.g., based on a field in their Firestore user document after manual setup, or a hardcoded list for MVP).

Admin Article Submission Screen UI:

Design and implement an admin-only screen accessible via navigation (conditionally shown).

Include TextFields for title, content, image URL, category, and author name.

Implement robust form validation for all fields.

Add a "Submit" Button.

Admin ViewModel:

Create AdminViewModel.kt to handle article submission logic, including validation and interaction with NewsRepository.

Article Submission Logic:

Extend NewsRepository to allow adding new NewsArticle documents to Firestore.

Ensure submitted articles appear in the news feed in real-time.

Phase 7: Polish & Refinements (The Finishing Touches)

Dark Mode / Theme Toggle Implementation:

Implement the UI element (e.g., a switch or button in settings/app bar) to toggle between light and dark themes.

Use MaterialTheme and dynamic theming.

Persist the selected theme using DataStore (or ViewModel state if simpler for MVP and configuration change handling is robust).

Animations:

Implement at least one subtle animation (e.g., fade-in for loaded content, slide transitions between screens, or animated visibility for components).

Offline State Handling (Review & Test):

Thoroughly test viewing previously loaded articles in read-only mode when disconnected.

Provide clear visual cues for offline status if possible.

UI Consistency & Styling Review:

Review all screens and components for consistent styling, adherence to the defined Material Theme (colors, typography, shapes), and correct use of strings.xml and dimens.xml.

Ensure all clickable components have clear visual feedback.

Configuration Change Handling (Thorough Test):

Test screen rotations, theme changes, and other configuration changes on all screens to ensure no data loss or UI state issues, relying on ViewModels.

Phase 8: Testing & Validation (Quality Assurance)

Unit & Integration Testing (Basic):

Write basic unit tests for ViewModel logic and utility functions (e.g., validators).

Consider basic integration tests for repository interactions if time permits.

Manual End-to-End Testing:

Test all user flows:

Login/Logout.

Viewing news feed and article details.

Commenting and reacting.

Saving and viewing saved articles.

Searching and filtering.

Admin article submission.

Theme toggling.

Offline behavior.

Test on multiple emulators (different screen sizes/densities) and physical devices if possible.

Bug Fixing & Performance Optimization:

Address any bugs found during testing.

Profile app performance if any sluggishness is observed (especially LazyColumn performance).

Phase 9: Documentation & Deployment Prep (Handover)

Finalize README.md:

Ensure all sections are up-to-date, including features, architecture, and setup instructions.

Add screenshots/GIFs if possible.

Code Cleanup & Comments:

Review code for clarity, remove unused code, and add comments where necessary.

Prepare for Submission/Deployment:

If applicable, build a signed APK/AAB.

Ensure all project requirements are demonstrably met.

This step-by-step approach provides a structured path to developing the UNews app, ensuring all required features and technical considerations are addressed systematically. Each phase builds upon the previous one, leading to a complete and functional MVP.